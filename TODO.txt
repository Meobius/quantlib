FINITE DIFFERENCE FRAMEWORK
-*allow for time dependant parameters
-*boundary conditions as in Wilmott
-*Douglas scheme (QuEP)
-*Richardson extrapolation (QuEP)
-*SOR rollback for free boundary condition
-*have time scheme as input
- clean up FDMultiPeriodOption
- check american with discrete dividends
- merge rollback scheme with tree rollback scheme
-*use DicretisedAsset instead of array
-*use TimeGrid

MONTE CARLO FRAMEWORK
- add example of Martingale control variate
- add examples of Montecarlo internal and Montecarlo convergence
-*replace all instance of seed with a random generator
-*have statistics class as input
- add Milstein Scheme
-*revise multidimensional MonteCarlo
-*time-dependant parameter in path generator
-*asset-dependant parameters in path generator
-*revise extrapolation in diffusion process

VOLATILITY
-*local volatility
- add bispline interpolation or the local vol will be useless
- investigate extrapolation effect, consider one side differences,
  instead of central, when on the border

PRICING ENGINE FRAMEWORK
- create Arguments class not including strike and use it in forward options
-*create vanilla FD example
-*create vanilla MC example
-*add new engines to test-suite
- deprecate old pricers
-*fix quantotermstructure/drifttermstructure problem
-*MC with both tolerance and/or fixed number of samples

MISCELLANEA
-*make unit test to work under Borland
-*add quanto, forward and performance forward to test suite
- verify PDB distribution
- remove defines in MS VC project settings
- solve copyright issues for external packages (COOOL, GAlib, etc.)
- ISDA/FpML
- PRMIA
- update freshmeat description
- get in touch with Gnumeric team
- Louw copyright
- revise interpolation allowExtrapolation
- add solver's target value (now the target value is 0.0)
- RPM package
- document namespaces on InterestRateDerivatives, Optimizers
- introduce compoundpathpricer ???
- GaussianPathGenerator, etc: allow for more general random walks
- what about barrier or FD with dividends ???
- revisite model/slice interface
- IRR, duration, etc for a cash flow stream
- QuantLib dynamic Win32 library (QuantLib.dll)
- clean up accuracy definition in solver1D (x or f(x) accuracy ?)
- implement round as per OMG enumeration/definition
- add one-touch option (american binary)
- implement dividendRho for dividendOption
- add historicalvolatility to RiskMeasures
- histogram class
- contact M. Higgings
- check disable warning 4786 better
- understand difference between multi-threaded and multi-threaded dll
- && (_MSC_VER >= 1200)

ASIAN
- continuous geometric APO backward starting instead of forward starting
- introduce continuous geometric ASO
- handle backward starting asian

OPTIMIZATION FRAMEWORK
- create a framework similar to the Solver1d framework
- add GALib (genetic algorithm)
- add COOOL algorithms

QuEP
- Currency as class with methods returning related info
- implement currency as per OMG definition

DOCUMENTATION
- http://www.iisec.com/
- use tidy (if available) on the HTML documentation
- enforce fulpath&classesinclude DoxyGen requirements
- add/update FAQ material in QuantLib-site TOD.txt

YIELD CURVE
- future convexity adjustment
- end of year turn

TREES
- check addDates
- BS correction
- merge rollback scheme with FD merge scheme
- trinomial trees
- implied trinomial trees

COMPILING
- borland compiler build tree indipendent from source tree
- check compile success/failure on other platforms/compilers available @SF
- Borland projects


+Changes to the Web Site
  * Improve documentation, maybe add a web-log where web-surfer can leave
    their remarks
  * Update the "to do" list
  * Draw a road map of future works

+Importance of Unit Testing
  The idea is to certify the quality of QuantLib using a unit-test framework.
  The tests would also serve as concrete examples on how the library should
  be used.
  QuantLib would be defined by what is tested, all the major features should
  be tested. In this way it will also be possible to maintain the synchronization
  of QuantLib with QuantLib.NET.
  All the tests in python will be moved to corresponding tests written in C++.

+Changes to the Library
  * Improve the documentation
  * Move to the Instrument/pricing engine framework
  * Refactor of the Finite-Difference framework merging with
    the Tree/Lattice framework
  * Develop a framework for stochastic processes
  * Build basic Bond classes
