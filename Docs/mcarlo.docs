
/*! \page mcarlo The Monte Carlo framework

    \htmlonly
    <table width="100%" border="0" cellpadding="0" cellspacing="0">
    <tr><td width="50%">&nbsp</td>
    <td>Anyone attempting to generate random numbers by 
    deterministic means is, of course, living in a state of sin.</td></tr>
    <tr><td width="50%">&nbsp</td>
    <td align="right">John von Neumann</td></tr>
    </table>
    \endhtmlonly
    
    \latexonly
    \begin{quotation}
        \small Anyone attempting to generate random numbers by 
        deterministic means is, of course, living in a state of sin. 
        \hfill --- John Von Neumann
    \end{quotation}
    \endlatexonly

    Documentation for this part of the library is still in progress.
        
    This framework (corresponding to the MonteCarlo namespace) 
    contains basic building blocks for the numerical calculation of 
    the integral 
    \f[ \int_{\Omega} f(\mathbf{x}) p(\mathbf{x}) d \mathbf{x} \f]
    where \f$ p(\mathbf{x}) \f$ is a normalized probability function.
    Monte Carlo methods solve the above integral by approximating it 
    with the discrete sum 
    \f[ \frac{1}{N} \sum_{i=1}^{N} f(\mathbf{x}_i) w(\mathbf{x}_i) \f]
    where the \f$ \mathbf{x}_i \f$ are drawn from \f$ p(\mathbf{x}) \f$,
    possibly with a weight \f$ w(\mathbf{x}_i) \f$---which otherwise can 
    be considered uniformly equal to 1.
    
    The above sum has a straightforward interpretation in the case of 
    a derivative product, namely, the \f$ \mathbf{x}_i \f$ are \f$ N \f$ 
    generated random paths which the value of the underlying can possibly 
    follow, while the \f$ f(\mathbf{x}_i) \f$ are the values of the 
    derivative on each of such paths. The sum above can therefore be taken 
    as an estimate of the price of the derivative, namely, the average of 
    its value on all possible paths---or rather all considered paths. Such 
    a method enables the user to construct pricing classes for an unlimited 
    range of derivatives, most notably path-dependent ones which cannot be 
    priced by means of finite difference methods.

    It must also be mentioned that for all such methods, the error 
    \f$ e \f$ on the estimated value is proportional to the square root of 
    the number of samples \f$ N \f$. 
    A number of so-called <em>variance-reduction</em> methods have been 
    found which allows one to reduce the coefficient of proportionality 
    between \f$ e \f$ and \f$ 1/\sqrt{N} \f$. However, they are not 
    considered here in any detail. 

    Separate implementations are provided in the library for the three 
    components of the above average, namely, the drawing of the 
    \f$ \mathbf{x}_i \f$, the evaluation of the \f$ f(\mathbf{x}_i) \f$, 
    and the averaging process itself. 
    The MonteCarloModel class acts as a glue for such three steps---which
    are outlined in the following subsections---and provides the interface 
    of the resulting Monte Carlo model to the end user.

    \subsection pathgen Path generation
    The Black-Scholes equation
    \f[ \frac{\partial t}{\partial t} +
        \frac{\sigma^2}{2} \frac{\partial^2 f}{\partial x^2} + 
        \nu \frac{\partial f}{\partial x} - r f = 0, 
    \f]
    where \f$ r \f$ is the risk-free rate, \f$ \sigma \f$ is the volatility 
    of the underlying, and \f$ \nu = r - \sigma^2/2 \f$, has the form of a 
    diffusion process. According to this heuristic interpretation, paths 
    followed by the underlying would be Brownian random walks with a 
    constant drift \f$ \nu \f$ per unit time and a standard deviation 
    \f$ \sigma \sqrt{T} \f$ over a time \f$ T \f$.
    
    A more rigorous approach would lead us to integrate the above equation 
    by means of Green functions or Laplace transforms. Both such methods 
    would show that the price at time \f$ t = 0 \f$ of an option with payoff 
    \f$ G(S(T)) \f$ where \f$ S(T) \f$ is the underlying price at expiry is 
    given by the integral
    \f[ \int_{-\infty}^{\infty} e^{-rT} G(S_0 e^\xi) 
        \frac{1}{\sqrt{2 \pi \sigma^2 T}}
        \exp \left( -\frac{(\xi - \nu T)^2}{2 \sigma^2 T} \right)
        \mathrm{d} \xi
    \f]
    where \f$ S_0 \f$ is the price of the underlying at \f$ t = 0 \f$.
    It can be seen that the above integral is of the form shown at the 
    beginning of this section, namely, the pricing function is 
    \f[ f(x) = e^{-rT} G(S_0 e^x) \f]
    and can be interpreted as the option payoff discounted to the
    present time, while the probability distribution is
    \f[ p(x) = \frac{1}{\sqrt{2 \pi \sigma^2 T}}
        \exp \left( -\frac{(x - \nu T)^2}{2 \sigma^2 T} \right).
    \f]
    which again shows that the underlying prices at time \f$ T \f$ are 
    distributed as a Gaussian with average \f$ \nu T \f$ and standard 
    deviation \f$ \sigma \sqrt{T} \f$.
    
    Therefore, the paths to be generated for a Monte Carlo model of the 
    Black-Scholes equation will be vectors of successive variations of 
    the underlying price over \f$ N \f$ consecutive time intervals 
    \f$ \Delta t_i, i = 0 \dots N-1 \f$. 
    Each such variation will be drawn from a Gaussian distribution with 
    average \f$ \nu \Delta T_i \f$ and standard deviation 
    \f$ \sigma \sqrt{\Delta T_i} \f$---or possibly \f$ \nu_i \Delta T_i \f$ 
    and \f$ \sigma_i \sqrt{\Delta T_i} \f$ should \f$ \nu \f$ and 
    \f$ \sigma \f$ vary in time.

    The library provides a number of components which can be chosen and 
    assembled to form the machinery for the generation of such paths.
    

    
    Further documentation is in progress.

    \subsection pathprc Pricing an instrument on a path
    In progress.

    \subsection pathavg Accumulating and averaging samples
    In progress.
*/

