
/*
 Copyright (C) 2000, 2001, 2002 RiskMap srl

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email ferdinando@ametrano.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page math Math tools
    Documentation for this part of the library is in progress.
    
    Math facilities of the library include:
    
    \subsection randomnumbers Random number and low discrepancy sequence generators
    Documentation for this part of the library is in progress.

    Implementations of random number and low discrepancy
    sequence generators. They share the QuantLib::RandomNumbers namespace.

    \subsection solvers1d One-dimensional solvers
    Documentation for this part of the library is in progress.

    The abstract class QuantLib::Solver1D provides the interface for 
    one-dimensional solvers which can find the zeroes of a given function.

    A number of such solvers is contained in the QuantLib::Solvers1D
    namespace.

    The implementation of the algorithms was inspired by
    "Numerical Recipes in C", 2nd edition,
    Press, Teukolsky, Vetterling, Flannery - Chapter 9

    Some work is needed to resolve the ambiguity of the root finding accuracy
    defition: for some algorithms it is the x-accuracy, for others it is
    f(x)-accuracy.

    \subsection optimizers Optimizers
    The optimization framework (corresponding to the Optimization namespace) 
    implements some multi-dimensional minimizing methods. The function to be 
    minimized is to be derived from the QuantLib::Optimization::CostFunction 
    base class (if the gradient is not analytically implemented, it will be 
    computed numerically).
    
    \par The simplex method

    see QuantLib::Optimization::Simplex .

    \par The conjugate gradient method

    see QuantLib::Optimization::ConjugateGradient .
 
*/

*/
