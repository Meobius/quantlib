/*
 Copyright (C) 2000, 2001, 2002 Sadruddin Rejeb

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email ferdinando@ametrano.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page fixedincome The interest rate modelling framework
    This framework (corresponding to the InterestRateModelling namespace)
    implements some basic interest rate modelling tools, i.e. single factor 
    short rate models. The models implemented in this library are widely used
    by practitionners. For the moment, the model class basically define a 
    driving stochastic equation of the type 
    \f[ 
        dx = \mu(t,x) dt + \sigma(t,x) dW_t 
    \f]
    where \f$ r = f(t,x) \f$ and define, if possible, analytical formulas 
    for discount bonds and discount bond options (useful for calibration). 
    Numerical pricing can be done via recombining trinomial trees implemented 
    in the Lattices::TrinomialTree class.

    \subsection singlefactormodels Single-factor models
    
    \par The Hull & White model
    \f[
        dr_t = (\theta(t) - \alpha(t) r_t)dt + \sigma(t) dW_t
    \f]
    When \f$ \alpha \f$ and \f$ \sigma \f$ are constants, this model
    has analytical formulas for discount bonds and discount bond options.

    \par The Black-Karasinski model
    \f[
        d\ln{r_t} = (\theta(t) - \alpha \ln{r_t})dt + \sigma dW_t
    \f]
    No analytical tractability here.

    \par The Cox-Ingersoll-Ross model
    \f[
        dr_t = (\theta(t) - k r_t)dt + \sigma \sqrt{r_t} dW_t
    \f]
    There are analytical formulas for discount bonds and discount bond 
    options.

    \subsection calibration Calibration

    The class CalibrationHelper is a base class that facilitates the 
    instanciation of market instruments used for calibration. It has
    a method marketValue() that gives the market price using a Black
    formula, and a modelValue() method that gives the price according to
    a model

    The first derived class is 
    QuantLib::InterestRateModelling::CalibrationHelpers::CapHelper.
    This helper creates a vanilla cap instrument, and prices it using discount 
    bond option formulas. If no such analytical formula is available, the 
    pricing is done using a trinomial recombining tree. 

    The second derived class is 
    QuantLib::InterestRateModelling::CalibrationHelpers::SwaptionHelper. This 
    helper creates a swaption instrument, and prices it using the Jamshidian
    decomposition. If no analytical formula for discount bonds is available, the 
    pricing is done using a trinomial recombining tree.

    For the calibration itself, you must choose an optimization method that
    will find constant parameters such that the value:
    \f[
        V = \sqrt{\sum_{i=1}^{n} \frac{T_i - M_i}{M_i}^2}
    \f]
    , where \f$ T_i \f$ is the price given by the model and \f$ M_i \f$ is the
    market price, is minimized. A few optimization methods are available in 
    the Optimization namespace, and more are on the way...

    \subsection fdpricing Pricing using finite differences

    If \f$ x = x(t, r) \f$ is the state variable and follows this stochastic 
    process:
    \f[
        dx_t = \mu(t,x)dt + \sigma(t,x)dW_t
    \f]
    any european-style instrument will follow the following PDE:

    \f[
        \frac{\partial P}{\partial t} + \mu \frac{\partial P}{\partial x}
        + \frac{1}{2} \sigma^2 \frac{\partial^2 P}{\partial x^2} = r(t,x)P
    \f]
    
    The adequate operator to feed a Finite Difference Model instance is defined
    in the QuantLib::FiniteDifferences::OneFactorOperator class.

    \subsection treepricing Pricing using trees

    Each model derived from the single-factor model class has the ability to 
    return a trinomial tree. For yield-curve consistent models, the fitting
    parameter can be determined either analytically (when possible) or 
    numerically. When a tree is built, it is then pretty straightforward to 
    implement a pricer for any path-independant derivative. Just implement
    a class derived from NumericalDerivative (see 
    QuantLib::Pricers::NumericalSwaption for example) and roll it back until 
    the present time...
    Just look at QuantLib::Pricers::TreeCapFloor and 
    QuantLib::Pricers::TreeSwaption for working pricers.

*/
