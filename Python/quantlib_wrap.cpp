/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20001002-1129 (Alpha 5)
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  "swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}
/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  unsigned long p;
  register int d;
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj || (obj == Py_None)) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*)p);
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[32], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[512];
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
#else
  SWIG_MakePtr(result,ptr,type);
  robj = PyString_FromString(result);
#endif
  return robj;
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Solver1D swig_types[0] 
#define  SWIGTYPE_p_TermStructureHandle swig_types[1] 
#define  SWIGTYPE_p_CurrencyHandle swig_types[2] 
#define  SWIGTYPE_p_Ridder swig_types[3] 
#define  SWIGTYPE_p_Deposit swig_types[4] 
#define  SWIGTYPE_p_Newton swig_types[5] 
#define  SWIGTYPE_p_Secant swig_types[6] 
#define  SWIGTYPE_p_InstrumentHandle swig_types[7] 
#define  SWIGTYPE_p_DayCounterHandle swig_types[8] 
#define  SWIGTYPE_p_CalendarHandle swig_types[9] 
#define  SWIGTYPE_p_Bisection swig_types[10] 
#define  SWIGTYPE_p_Function swig_types[11] 
#define  SWIGTYPE_p_Date swig_types[12] 
#define  SWIGTYPE_p_BoundaryCondition swig_types[13] 
#define  SWIGTYPE_p_FalsePosition swig_types[14] 
#define  SWIGTYPE_p_BSMAmericanOption swig_types[15] 
#define  SWIGTYPE_p_BSMEuropeanOption swig_types[16] 
#define  SWIGTYPE_p_Brent swig_types[17] 
#define  SWIGTYPE_p_NewtonSafe swig_types[18] 
#define  SWIGTYPE_p_TridiagonalOperator swig_types[19] 
static swig_type_info *swig_types[21];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= QuantLibc.so
  ------------------------------------------------*/
#define SWIG_init    initQuantLibc

#define SWIG_name    "QuantLibc"

#include "qldefines.h"

#include <cstdlib>
#include <string>
#include "date.h"
QL_USING(QuantLib,Date)

QL_USING(QuantLib,Day)
QL_USING(QuantLib,Year)
QL_USING(QuantLib,Time)

QL_USING(QuantLib,Weekday)
QL_USING(QuantLib,Sunday)
QL_USING(QuantLib,Monday)
QL_USING(QuantLib,Tuesday)
QL_USING(QuantLib,Wednesday)
QL_USING(QuantLib,Thursday)
QL_USING(QuantLib,Friday)
QL_USING(QuantLib,Saturday)

#include "stringconverters.h"
QL_USING(QuantLib,ConvertToLowercase)

QL_USING(QuantLib,Month)
QL_USING(QuantLib,January)
QL_USING(QuantLib,February)
QL_USING(QuantLib,March)
QL_USING(QuantLib,April)
QL_USING(QuantLib,May)
QL_USING(QuantLib,June)
QL_USING(QuantLib,July)
QL_USING(QuantLib,August)
QL_USING(QuantLib,September)
QL_USING(QuantLib,October)
QL_USING(QuantLib,November)
QL_USING(QuantLib,December)

	QL_USING(QuantLib,TimeUnit)
	QL_USING(QuantLib,Days)
	QL_USING(QuantLib,Weeks)
	QL_USING(QuantLib,Months)
	QL_USING(QuantLib,Years)

#include "formats.h"
QL_USING(QuantLib,DateFormat)

	Date DateFromSerialNumber(int serialNumber) {
		return Date(serialNumber);
	}

#include "calendar.h"

QL_USING(QuantLib,Handle)
QL_USING(QuantLib,Calendar)
typedef Handle<Calendar> CalendarHandle;

QL_USING(QuantLib,Following)
QL_USING(QuantLib,ModifiedFollowing)
QL_USING(QuantLib,IsNull)

#include "target.h"
#include "newyork.h"
#include "london.h"
#include "frankfurt.h"
#include "milan.h"

QL_USING(QuantLib::Calendars,TARGET)
QL_USING(QuantLib::Calendars,NewYork)
QL_USING(QuantLib::Calendars,London)
QL_USING(QuantLib::Calendars,Milan)
QL_USING(QuantLib::Calendars,Frankfurt)

CalendarHandle NewTARGET()    { return CalendarHandle(new TARGET); }
CalendarHandle NewNewYork()   { return CalendarHandle(new NewYork); }
CalendarHandle NewLondon()    { return CalendarHandle(new London); }
CalendarHandle NewFrankfurt() { return CalendarHandle(new Frankfurt); }
CalendarHandle NewMilan()     { return CalendarHandle(new Milan); }

#include "daycounter.h"
#include "actual360.h"
#include "actual365.h"
#include "actualactual.h"
#include "thirty360.h"
#include "thirty360european.h"
#include "thirty360italian.h"

QL_USING(QuantLib,Handle)
QL_USING(QuantLib,DayCounter)
typedef Handle<DayCounter> DayCounterHandle;

QL_USING(QuantLib::DayCounters,Actual360)
QL_USING(QuantLib::DayCounters,Actual365)
QL_USING(QuantLib::DayCounters,Thirty360)
QL_USING(QuantLib::DayCounters,Thirty360European)
QL_USING(QuantLib::DayCounters,Thirty360Italian)

DayCounterHandle NewActual360()			{ return DayCounterHandle(new Actual360); }
DayCounterHandle NewActual365()			{ return DayCounterHandle(new Actual365); }
DayCounterHandle NewThirty360()			{ return DayCounterHandle(new Thirty360); }
DayCounterHandle NewThirty360European()	{ return DayCounterHandle(new Thirty360European); }
DayCounterHandle NewThirty360Italian()	{ return DayCounterHandle(new Thirty360Italian); }

#include "currency.h"
#include "eur.h"
#include "usd.h"
#include "gbp.h"
#include "dem.h"
#include "itl.h"

QL_USING(QuantLib,Currency)
QL_USING(QuantLib,Handle)
typedef Handle<Currency> CurrencyHandle;

QL_USING(QuantLib::Currencies,EUR)
QL_USING(QuantLib::Currencies,USD)
QL_USING(QuantLib::Currencies,GBP)
QL_USING(QuantLib::Currencies,DEM)
QL_USING(QuantLib::Currencies,ITL)

CurrencyHandle NewEUR()		{ return CurrencyHandle(new EUR); }
CurrencyHandle NewUSD()		{ return CurrencyHandle(new USD); }
CurrencyHandle NewGBP()		{ return CurrencyHandle(new GBP); }
CurrencyHandle NewDEM()		{ return CurrencyHandle(new DEM); }
CurrencyHandle NewITL()		{ return CurrencyHandle(new ITL); }

#include "yield.h"
#include "spread.h"
#include "discountfactor.h"

QL_USING(QuantLib,Rate)
QL_USING(QuantLib,Spread)
QL_USING(QuantLib,DiscountFactor)

#include "options.h"
#include "stringconverters.h"

	QL_USING(QuantLib,Option)
	QL_USING(QuantLib,ConvertToLowercase)

	typedef Option::Type OptionType;

#include "termstructure.h"
#include "handle.h"

QL_USING(QuantLib,TermStructure)
QL_USING(QuantLib,Handle)
typedef Handle<TermStructure> TermStructureHandle;

#include "piecewiseconstantforwards.h"

QL_USING(QuantLib::TermStructures,PiecewiseConstantForwards)
QL_USING(QuantLib,Deposit)

	typedef std::vector<Deposit> DepositList;

TermStructureHandle NewPiecewiseConstantForwards(CurrencyHandle currency, DayCounterHandle dayCounter, 
  Date today, DepositList deposits) {
	return Handle<TermStructure>(new PiecewiseConstantForwards(currency,dayCounter,today,deposits));
}

	#include "instrument.h"
	#include <cstdlib>

	QL_USING(QuantLib,Instrument)
	QL_USING(QuantLib,Handle)

	typedef Handle<Instrument> InstrumentHandle;

std::string Representation(const Handle<Instrument>& i) {
	std::string isin = i->isinCode();
	if (isin == "")
		isin = "unknown";
	std::string desc = i->description();
	if (desc == "")
		desc = "no description available";
	return (isin+" ("+desc+")");
}

#include "stock.h"
QL_USING(QuantLib::Instruments,Stock)

InstrumentHandle NewStock(char* isinCode, char* description) {
	return InstrumentHandle(new Stock(isinCode,description));
}

// std::vector specializations
#include <vector>
typedef std::vector<int> IntVector;
typedef std::vector<double> DoubleVector;

// array
#include "array.h"
QL_USING(QuantLib,Array)

#include "boundarycondition.h"
QL_USING(QuantLib::PDE,BoundaryCondition)
typedef BoundaryCondition::Type BoundaryConditionType;

#include "stringconverters.h"
QL_USING(QuantLib,ConvertToLowercase)

#include "tridiagonaloperator.h"
QL_USING(QuantLib::Operators,TridiagonalOperator)

#include "bsmeuropeanoption.h"
#include "bsmamericanoption.h"
QL_USING(QuantLib::Pricers,BSMEuropeanOption)
QL_USING(QuantLib::Pricers,BSMAmericanOption)

#include "bisection.h"
#include "brent.h"
#include "falseposition.h"
#include "newton.h"
#include "newtonsafe.h"
#include "ridder.h"
#include "secant.h"

QL_USING(QuantLib,Function)

QL_USING(QuantLib,Ensure)

// its C++ container
class PyFunction : public Function {
  public:
	PyFunction(PyObject *pyFunction) : thePyFunction(pyFunction) {}
	double value(double x) const {
		PyObject* pyResult = PyObject_CallMethod(thePyFunction,"value","d",x);
		Ensure(pyResult != NULL, "failed to call value() on Python object");
		double result = PyFloat_AsDouble(pyResult);
		Py_XDECREF(pyResult);
		return result;
	}
	double derivative(double x) const {
		PyObject* pyResult = PyObject_CallMethod(thePyFunction,"derivative","d",x);
		Ensure(pyResult != NULL, "failed to call derivative() on Python object");
		double result = PyFloat_AsDouble(pyResult);
		Py_XDECREF(pyResult);
		return result;
	}
  private:
	PyObject* thePyFunction;
};

QL_USING(QuantLib,Solver1D)

QL_USING(QuantLib::Solvers1D,Bisection)
QL_USING(QuantLib::Solvers1D,Brent)
QL_USING(QuantLib::Solvers1D,FalsePosition)
QL_USING(QuantLib::Solvers1D,Newton)
QL_USING(QuantLib::Solvers1D,NewtonSafe)
QL_USING(QuantLib::Solvers1D,Ridder)
QL_USING(QuantLib::Solvers1D,Secant)
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_DateFromSerialNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    int arg0 ;
    char *kwnames[] = {
        "serialNumber", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:DateFromSerialNumber",kwnames,&arg0)) return NULL;
    {
        try {
            result = new Date (DateFromSerialNumber(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_TARGET(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":TARGET",kwnames)) return NULL;
    {
        try {
            result = new CalendarHandle (NewTARGET());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


static PyObject *_wrap_NewYork(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":NewYork",kwnames)) return NULL;
    {
        try {
            result = new CalendarHandle (NewNewYork());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


static PyObject *_wrap_London(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":London",kwnames)) return NULL;
    {
        try {
            result = new CalendarHandle (NewLondon());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


static PyObject *_wrap_Frankfurt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Frankfurt",kwnames)) return NULL;
    {
        try {
            result = new CalendarHandle (NewFrankfurt());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


static PyObject *_wrap_Milan(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Milan",kwnames)) return NULL;
    {
        try {
            result = new CalendarHandle (NewMilan());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


static PyObject *_wrap_Actual360(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Actual360",kwnames)) return NULL;
    {
        try {
            result = new DayCounterHandle (NewActual360());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_Actual365(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Actual365",kwnames)) return NULL;
    {
        try {
            result = new DayCounterHandle (NewActual365());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_Thirty360(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Thirty360",kwnames)) return NULL;
    {
        try {
            result = new DayCounterHandle (NewThirty360());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_Thirty360European(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Thirty360European",kwnames)) return NULL;
    {
        try {
            result = new DayCounterHandle (NewThirty360European());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_Thirty360Italian(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Thirty360Italian",kwnames)) return NULL;
    {
        try {
            result = new DayCounterHandle (NewThirty360Italian());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_EUR(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":EUR",kwnames)) return NULL;
    {
        try {
            result = new CurrencyHandle (NewEUR());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


static PyObject *_wrap_USD(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":USD",kwnames)) return NULL;
    {
        try {
            result = new CurrencyHandle (NewUSD());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


static PyObject *_wrap_GBP(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":GBP",kwnames)) return NULL;
    {
        try {
            result = new CurrencyHandle (NewGBP());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


static PyObject *_wrap_DEM(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":DEM",kwnames)) return NULL;
    {
        try {
            result = new CurrencyHandle (NewDEM());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


static PyObject *_wrap_ITL(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":ITL",kwnames)) return NULL;
    {
        try {
            result = new CurrencyHandle (NewITL());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


static PyObject *_wrap_PiecewiseConstantForwards(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    DayCounterHandle *arg1 ;
    Date *arg2 ;
    DepositList *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    PyObject * obj3  = 0 ;
    char *kwnames[] = {
        "currency","dayCounter","today","deposits", NULL 
    };
    TermStructureHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOOO:PiecewiseConstantForwards",kwnames,&argo0,&argo1,&argo2,&obj3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        if (PyTuple_Check(obj3)) {
            int size = PyTuple_Size(obj3);
            arg3 = new std::vector<Deposit>(size);
            for (int i=0; i<size; i++) {
                Deposit* d;
                PyObject* o = PyTuple_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &d,(swig_type_info *)SWIG_TypeQuery("Deposit *"),1)) != -1) {
                    (*arg3)[i] = *d;
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain deposits");
                    delete arg3;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj3)) {
            int size = PyList_Size(obj3);
            arg3 = new std::vector<Deposit>(size);
            for (int i=0; i<size; i++) {
                Deposit* d;
                PyObject* o = PyList_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &d,(swig_type_info *)SWIG_TypeQuery("Deposit *"),1)) != -1) {
                    (*arg3)[i] = *d;
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain deposits");
                    delete arg3;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        try {
            result = new TermStructureHandle (NewPiecewiseConstantForwards(*arg0,*arg1,*arg2,*arg3));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_TermStructureHandle);
    {
        delete arg3;
    }
    return resultobj;
}


static PyObject *_wrap_Stock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg0 ;
    char *arg1 ;
    char *kwnames[] = {
        "isinCode","description", NULL 
    };
    InstrumentHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"ss:Stock",kwnames,&arg0,&arg1)) return NULL;
    {
        try {
            result = new InstrumentHandle (NewStock(arg0,arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_InstrumentHandle);
    return resultobj;
}


static PyObject *_wrap_new_Date(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Day arg0 ;
    Month *arg1 ;
    Year arg2 ;
    PyObject * obj1  = 0 ;
    char *kwnames[] = {
        "d","m","y", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"iOi:new_Date",kwnames,&arg0,&obj1,&arg2)) return NULL;
    {
        if (PyString_Check(obj1)) {
            std::string s(PyString_AsString(obj1));
            ConvertToLowercase(s);
            if (s == "jan" || s == "january")			arg1 = new Month(January);
            else if (s == "feb" || s == "february")		arg1 = new Month(February);
            else if (s == "mar" || s == "march")		arg1 = new Month(March);
            else if (s == "apr" || s == "april")		arg1 = new Month(April);
            else if (s == "may")						arg1 = new Month(May);
            else if (s == "jun" || s == "june")			arg1 = new Month(June);
            else if (s == "jul" || s == "july")			arg1 = new Month(July);
            else if (s == "aug" || s == "august")		arg1 = new Month(August);
            else if (s == "sep" || s == "september")	arg1 = new Month(September);
            else if (s == "oct" || s == "october")		arg1 = new Month(October);
            else if (s == "nov" || s == "november")		arg1 = new Month(November);
            else if (s == "dec" || s == "december")		arg1 = new Month(December);
            else {
                PyErr_SetString(PyExc_TypeError,"not a month");
                return NULL;
            }
        }else if (PyInt_Check(obj1)) {
            int i = int(PyInt_AsLong(obj1));
            if (i>=1 && i<=12)
            arg1 = new Month(Month(i-1));
            else {
                PyErr_SetString(PyExc_TypeError,"not a month");
                return NULL;
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a weekday");
            return NULL;
        }
    }
    {
        try {
            result = (Date *)new Date(arg0,*arg1,arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Date);
    {
        delete arg1;
    }
    return resultobj;
}


static PyObject *_wrap_delete_Date(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Date",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Date_dayOfWeek(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Weekday *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_dayOfWeek",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Weekday (arg0->dayOfWeek());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }{
        switch (*result) {
            case Sunday:		resultobj = PyString_FromString("Sunday");	break;
            case Monday:		resultobj = PyString_FromString("Monday");	break;
            case Tuesday:		resultobj = PyString_FromString("Tuesday");	break;
            case Wednesday:	resultobj = PyString_FromString("Wednesday");	break;
            case Thursday:	resultobj = PyString_FromString("Thursday");	break;
            case Friday:		resultobj = PyString_FromString("Friday");	break;
            case Saturday:	resultobj = PyString_FromString("Saturday");	break;
        }
    }
    {
        delete result;
    }
    return resultobj;
}


static PyObject *_wrap_Date_dayOfMonth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Day result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_dayOfMonth",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Day )arg0->dayOfMonth();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Date_dayOfYear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Day result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_dayOfYear",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Day )arg0->dayOfYear();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Date_month(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Month *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_month",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Month (arg0->month());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }{
        switch (*result) {
            case January:		resultobj = PyString_FromString("January");	break;
            case February:	resultobj = PyString_FromString("February");	break;
            case March:		resultobj = PyString_FromString("March");		break;
            case April:		resultobj = PyString_FromString("April");		break;
            case May:			resultobj = PyString_FromString("May");		break;
            case June:		resultobj = PyString_FromString("June");		break;
            case July:		resultobj = PyString_FromString("July");		break;
            case August:		resultobj = PyString_FromString("August");	break;
            case September:	resultobj = PyString_FromString("September");	break;
            case October:		resultobj = PyString_FromString("October");	break;
            case November:	resultobj = PyString_FromString("November");	break;
            case December:	resultobj = PyString_FromString("December");	break;
        }
    }
    {
        delete result;
    }
    return resultobj;
}


static PyObject *_wrap_Date_year(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Year result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_year",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Year )arg0->year();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Date_serialNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date_serialNumber",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (int )arg0->serialNumber();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Date_plusDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","days", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date_plusDays",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (arg0->plusDays(arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Date_plusWeeks(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","weeks", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date_plusWeeks",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (arg0->plusWeeks(arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Date_plusMonths(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","months", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date_plusMonths",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (arg0->plusMonths(arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Date_plusYears(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","years", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date_plusYears",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (arg0->plusYears(arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Date_plus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    TimeUnit *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * obj2  = 0 ;
    char *kwnames[] = {
        "self","units","arg3", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:Date_plus",kwnames,&argo0,&arg1,&obj2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        if (PyString_Check(obj2)) {
            std::string s(PyString_AsString(obj2));
            ConvertToLowercase(s);
            if (s == "d" || s == "day" || s == "days")			arg2 = new TimeUnit(Days);
            else if (s == "w" || s == "week" || s == "weeks")	arg2 = new TimeUnit(Weeks);
            else if (s == "m" || s == "month" || s == "months")	arg2 = new TimeUnit(Months);
            else if (s == "y" || s == "year" || s == "years")	arg2 = new TimeUnit(Years);
            else {
                PyErr_SetString(PyExc_TypeError,"unknown time unit");
                return NULL;
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a time unit");
            return NULL;
        }
    }
    {
        try {
            result = new Date (arg0->plus(arg1,*arg2));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    {
        delete arg2;
    }
    return resultobj;
}


static PyObject *_wrap_Date_isLeap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Year arg0 ;
    char *kwnames[] = {
        "y", NULL 
    };
    bool result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"i:Date_isLeap",kwnames,&arg0)) return NULL;
    {
        try {
            result = (bool )Date::isLeap(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_Date_minDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Date_minDate",kwnames)) return NULL;
    {
        try {
            result = new Date (Date::minDate());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Date_maxDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":Date_maxDate",kwnames)) return NULL;
    {
        try {
            result = new Date (Date::maxDate());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Date  Date___add__(Date *self,int days) {
    {
        return self->plusDays(days);
    }
}


static PyObject *_wrap_Date___add__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","days", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date___add__",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (Date___add__(arg0,arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Date  Date___sub__(Date *self,int days) {
    {
        return self->plusDays(-days);
    }
}


static PyObject *_wrap_Date___sub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","days", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Date___sub__",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (Date___sub__(arg0,arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


char * Date___str__(Date *self) {
    {
        static char temp[256];
        strcpy(temp,DateFormat(*self).c_str());
        return temp;
    }
}


static PyObject *_wrap_Date___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (char *)Date___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * Date___repr__(Date *self) {
    {
        static char temp[256];
        std::string s = "<Date: "+DateFormat(*self)+">";
        strcpy(temp,s.c_str());
        return temp;
    }
}


static PyObject *_wrap_Date___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Date___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (char *)Date___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_delete_Calendar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Calendar",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


bool  CalendarHandle_isBusinessDay(CalendarHandle *self,Date const &d) {
    {
        return (*self)->isBusinessDay(d);
    }
}


static PyObject *_wrap_Calendar_isBusinessDay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    bool result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Calendar_isBusinessDay",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (bool )CalendarHandle_isBusinessDay(arg0,(Date const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


bool  CalendarHandle_isHoliday(CalendarHandle *self,Date const &d) {
    {
        return (*self)->isHoliday(d);
    }
}


static PyObject *_wrap_Calendar_isHoliday(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    bool result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Calendar_isHoliday",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (bool )CalendarHandle_isHoliday(arg0,(Date const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


Date  CalendarHandle_roll(CalendarHandle *self,Date const &d,bool modified) {
    {
        return (*self)->roll(modified ? ModifiedFollowing : Following, d);
    }
}


static PyObject *_wrap_Calendar_roll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    Date *arg1 ;
    bool arg2 = false ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int tempbool2 = (int) false ;
    char *kwnames[] = {
        "self","d","modified", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|i:Calendar_roll",kwnames,&argo0,&argo1,&tempbool2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    arg2 = (bool ) tempbool2;
    {
        try {
            result = new Date (CalendarHandle_roll(arg0,(Date const &)*arg1,arg2));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Date  CalendarHandle_advance(CalendarHandle *self,Date const &d,int businessDays) {
    {
        return (*self)->advance(d,businessDays);
    }
}


static PyObject *_wrap_Calendar_advance(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    Date *arg1 ;
    int arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d","businessDays", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:Calendar_advance",kwnames,&argo0,&argo1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (CalendarHandle_advance(arg0,(Date const &)*arg1,arg2));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


char * CalendarHandle___str__(CalendarHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"%s calendar",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_Calendar___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Calendar___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)CalendarHandle___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * CalendarHandle___repr__(CalendarHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"<%s calendar>",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_Calendar___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Calendar___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)CalendarHandle___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


int  CalendarHandle___cmp__(CalendarHandle *self,CalendarHandle const &other) {
    {
        return ((*self) == other ? 0 : 1);
    }
}


static PyObject *_wrap_Calendar___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    CalendarHandle *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","other", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Calendar___cmp__",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )CalendarHandle___cmp__(arg0,(CalendarHandle const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  CalendarHandle___nonzero__(CalendarHandle *self) {
    {
        return (IsNull(*self) ? 0 : 1);
    }
}


static PyObject *_wrap_Calendar___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CalendarHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Calendar___nonzero__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CalendarHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )CalendarHandle___nonzero__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_DayCounter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_DayCounter",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


int  DayCounterHandle_dayCount(DayCounterHandle *self,Date const &d1,Date const &d2) {
    {
        return (*self)->dayCount(d1,d2);
    }
}


static PyObject *_wrap_DayCounter_dayCount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    Date *arg1 ;
    Date *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    char *kwnames[] = {
        "self","d1","d2", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:DayCounter_dayCount",kwnames,&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (int )DayCounterHandle_dayCount(arg0,(Date const &)*arg1,(Date const &)*arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


Time  DayCounterHandle_yearFraction(DayCounterHandle *self,Date const &d1,Date const &d2) {
    {
        return (*self)->yearFraction(d1,d2);
    }
}


static PyObject *_wrap_DayCounter_yearFraction(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    Date *arg1 ;
    Date *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    PyObject * argo2 =0 ;
    char *kwnames[] = {
        "self","d1","d2", NULL 
    };
    Time result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:DayCounter_yearFraction",kwnames,&argo0,&argo1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Time )DayCounterHandle_yearFraction(arg0,(Date const &)*arg1,(Date const &)*arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


char * DayCounterHandle___str__(DayCounterHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"%s day counter",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_DayCounter___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:DayCounter___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)DayCounterHandle___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * DayCounterHandle___repr__(DayCounterHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"<%s day counter>",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_DayCounter___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:DayCounter___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)DayCounterHandle___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


int  DayCounterHandle___cmp__(DayCounterHandle *self,DayCounterHandle const &other) {
    {
        return ((*self) == other ? 0 : 1);
    }
}


static PyObject *_wrap_DayCounter___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    DayCounterHandle *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","other", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:DayCounter___cmp__",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )DayCounterHandle___cmp__(arg0,(DayCounterHandle const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  DayCounterHandle___nonzero__(DayCounterHandle *self) {
    {
        return (IsNull(*self) ? 0 : 1);
    }
}


static PyObject *_wrap_DayCounter___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    DayCounterHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:DayCounter___nonzero__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )DayCounterHandle___nonzero__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_Currency(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Currency",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


CalendarHandle  CurrencyHandle_settlementCalendar(CurrencyHandle *self) {
    {
        return (*self)->settlementCalendar();
    }
}


static PyObject *_wrap_Currency_settlementCalendar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Currency_settlementCalendar",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = new CalendarHandle (CurrencyHandle_settlementCalendar(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


int  CurrencyHandle_settlementDays(CurrencyHandle *self) {
    {
        return (*self)->settlementDays();
    }
}


static PyObject *_wrap_Currency_settlementDays(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Currency_settlementDays",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )CurrencyHandle_settlementDays(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


Date  CurrencyHandle_settlementDate(CurrencyHandle *self,Date const &d) {
    {
        return (*self)->settlementDate(d);
    }
}


static PyObject *_wrap_Currency_settlementDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Currency_settlementDate",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = new Date (CurrencyHandle_settlementDate(arg0,(Date const &)*arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


char * CurrencyHandle___str__(CurrencyHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"%s currency",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_Currency___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Currency___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)CurrencyHandle___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * CurrencyHandle___repr__(CurrencyHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"<%s currency>",(*self)->name().c_str());
        return temp;
    }
}


static PyObject *_wrap_Currency___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Currency___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)CurrencyHandle___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


int  CurrencyHandle___cmp__(CurrencyHandle *self,CurrencyHandle const &other) {
    {
        return ((*self) == other ? 0 : 1);
    }
}


static PyObject *_wrap_Currency___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    CurrencyHandle *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","other", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Currency___cmp__",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )CurrencyHandle___cmp__(arg0,(CurrencyHandle const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  CurrencyHandle___nonzero__(CurrencyHandle *self) {
    {
        return (IsNull(*self) ? 0 : 1);
    }
}


static PyObject *_wrap_Currency___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    CurrencyHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Currency___nonzero__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_CurrencyHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )CurrencyHandle___nonzero__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_TermStructure(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_TermStructure",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


TermStructureHandle  TermStructureHandle_clone(TermStructureHandle *self) {
    {
        return (*self)->clone();
    }
}


static PyObject *_wrap_TermStructure_clone(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    TermStructureHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_clone",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new TermStructureHandle (TermStructureHandle_clone(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_TermStructureHandle);
    return resultobj;
}


CurrencyHandle  TermStructureHandle_currency(TermStructureHandle *self) {
    {
        return (*self)->currency();
    }
}


static PyObject *_wrap_TermStructure_currency(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    CurrencyHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_currency",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new CurrencyHandle (TermStructureHandle_currency(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CurrencyHandle);
    return resultobj;
}


Date  TermStructureHandle_todaysDate(TermStructureHandle *self) {
    {
        return (*self)->todaysDate();
    }
}


static PyObject *_wrap_TermStructure_todaysDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_todaysDate",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new Date (TermStructureHandle_todaysDate(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Date  TermStructureHandle_settlementDate(TermStructureHandle *self) {
    {
        return (*self)->settlementDate();
    }
}


static PyObject *_wrap_TermStructure_settlementDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_settlementDate",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new Date (TermStructureHandle_settlementDate(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


CalendarHandle  TermStructureHandle_calendar(TermStructureHandle *self) {
    {
        return (*self)->calendar();
    }
}


static PyObject *_wrap_TermStructure_calendar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    CalendarHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_calendar",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new CalendarHandle (TermStructureHandle_calendar(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_CalendarHandle);
    return resultobj;
}


Date  TermStructureHandle_maxDate(TermStructureHandle *self) {
    {
        return (*self)->maxDate();
    }
}


static PyObject *_wrap_TermStructure_maxDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_maxDate",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new Date (TermStructureHandle_maxDate(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Date  TermStructureHandle_minDate(TermStructureHandle *self) {
    {
        return (*self)->minDate();
    }
}


static PyObject *_wrap_TermStructure_minDate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure_minDate",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = new Date (TermStructureHandle_minDate(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


Rate  TermStructureHandle_zeroYield(TermStructureHandle *self,Date const &d) {
    {
        return (*self)->zeroYield(d);
    }
}


static PyObject *_wrap_TermStructure_zeroYield(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    Rate result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TermStructure_zeroYield",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Rate )TermStructureHandle_zeroYield(arg0,(Date const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


DiscountFactor  TermStructureHandle_discount(TermStructureHandle *self,Date const &d) {
    {
        return (*self)->discount(d);
    }
}


static PyObject *_wrap_TermStructure_discount(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    DiscountFactor result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TermStructure_discount",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (DiscountFactor )TermStructureHandle_discount(arg0,(Date const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


Rate  TermStructureHandle_forward(TermStructureHandle *self,Date const &d) {
    {
        return (*self)->forward(d);
    }
}


static PyObject *_wrap_TermStructure_forward(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    Date *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","d", NULL 
    };
    Rate result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TermStructure_forward",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Date,1)) == -1) return NULL;
    {
        try {
            result = (Rate )TermStructureHandle_forward(arg0,(Date const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


char * TermStructureHandle___str__(TermStructureHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"Term structure");
        return temp;
    }
}


static PyObject *_wrap_TermStructure___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)TermStructureHandle___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * TermStructureHandle___repr__(TermStructureHandle *self) {
    {
        static char temp[256];
        sprintf(temp,"<Term structure>");
        return temp;
    }
}


static PyObject *_wrap_TermStructure___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)TermStructureHandle___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


int  TermStructureHandle___nonzero__(TermStructureHandle *self) {
    {
        return (IsNull(*self) ? 0 : 1);
    }
}


static PyObject *_wrap_TermStructure___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TermStructureHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TermStructure___nonzero__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )TermStructureHandle___nonzero__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_Deposit(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Date *arg0 ;
    Rate arg1 ;
    DayCounterHandle *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    char *kwnames[] = {
        "maturity","rate","dayCounter", NULL 
    };
    Deposit *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OdO:new_Deposit",kwnames,&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Date,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_DayCounterHandle,1)) == -1) return NULL;
    {
        try {
            result = (Deposit *)new Deposit(*arg0,arg1,*arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Deposit);
    return resultobj;
}


static PyObject *_wrap_delete_Deposit(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Deposit *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Deposit",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Deposit,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_Deposit_maturity(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Deposit *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Date *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Deposit_maturity",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Deposit,1)) == -1) return NULL;
    {
        try {
            result = new Date (arg0->maturity());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_Date);
    return resultobj;
}


static PyObject *_wrap_Deposit_rate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Deposit *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    Rate result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Deposit_rate",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Deposit,1)) == -1) return NULL;
    {
        try {
            result = (Rate )arg0->rate();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Deposit_dayCounter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Deposit *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    DayCounterHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Deposit_dayCounter",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Deposit,1)) == -1) return NULL;
    {
        try {
            result = new DayCounterHandle (arg0->dayCounter());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_DayCounterHandle);
    return resultobj;
}


static PyObject *_wrap_delete_Instrument(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Instrument",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  InstrumentHandle_setPrice(InstrumentHandle *self,double price) {
    {
        (*self)->setPrice(price);
    }
}


static PyObject *_wrap_Instrument_setPrice(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","price", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:Instrument_setPrice",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            InstrumentHandle_setPrice(arg0,arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


void  InstrumentHandle_setTermStructure(InstrumentHandle *self,TermStructureHandle h) {
    {
        (*self)->setTermStructure(h);
    }
}


static PyObject *_wrap_Instrument_setTermStructure(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    TermStructureHandle *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","h", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Instrument_setTermStructure",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_TermStructureHandle,1)) == -1) return NULL;
    {
        try {
            InstrumentHandle_setTermStructure(arg0,*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


char * InstrumentHandle_isinCode(InstrumentHandle *self) {
    {
        static char temp[256];
        strcpy(temp,(*self)->isinCode().c_str());
        return temp;
    }
}


static PyObject *_wrap_Instrument_isinCode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument_isinCode",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)InstrumentHandle_isinCode(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * InstrumentHandle_description(InstrumentHandle *self) {
    {
        static char temp[256];
        strcpy(temp,(*self)->description().c_str());
        return temp;
    }
}


static PyObject *_wrap_Instrument_description(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument_description",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)InstrumentHandle_description(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


TermStructureHandle  InstrumentHandle_termStructure(InstrumentHandle *self) {
    {
        return (*self)->termStructure();
    }
}


static PyObject *_wrap_Instrument_termStructure(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    TermStructureHandle *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument_termStructure",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = new TermStructureHandle (InstrumentHandle_termStructure(arg0));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_TermStructureHandle);
    return resultobj;
}


double  InstrumentHandle_NPV(InstrumentHandle *self) {
    {
        return (*self)->NPV();
    }
}


static PyObject *_wrap_Instrument_NPV(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument_NPV",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (double )InstrumentHandle_NPV(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


double  InstrumentHandle_price(InstrumentHandle *self) {
    {
        return (*self)->price();
    }
}


static PyObject *_wrap_Instrument_price(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument_price",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (double )InstrumentHandle_price(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


char * InstrumentHandle___str__(InstrumentHandle *self) {
    {
        static char temp[256];
        strcpy(temp,Representation(*self).c_str());
        return temp;
    }
}


static PyObject *_wrap_Instrument___str__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument___str__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)InstrumentHandle___str__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


char * InstrumentHandle___repr__(InstrumentHandle *self) {
    {
        static char temp[256];
        std::string s = "<Handle<Instrument>: "+Representation(*self)+">";
        strcpy(temp,s.c_str());
        return temp;
    }
}


static PyObject *_wrap_Instrument___repr__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    char *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument___repr__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (char *)InstrumentHandle___repr__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyString_FromString(result);
    return resultobj;
}


int  InstrumentHandle___cmp__(InstrumentHandle *self,InstrumentHandle const &other) {
    {
        return ((*self) == other ? 0 : 1);
    }
}


static PyObject *_wrap_Instrument___cmp__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    InstrumentHandle *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","other", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:Instrument___cmp__",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )InstrumentHandle___cmp__(arg0,(InstrumentHandle const &)*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


int  InstrumentHandle___nonzero__(InstrumentHandle *self) {
    {
        return (IsNull(*self) ? 0 : 1);
    }
}


static PyObject *_wrap_Instrument___nonzero__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InstrumentHandle *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:Instrument___nonzero__",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_InstrumentHandle,1)) == -1) return NULL;
    {
        try {
            result = (int )InstrumentHandle___nonzero__(arg0);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_BoundaryCondition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    BoundaryConditionType *arg0 ;
    double arg1 ;
    PyObject * obj0  = 0 ;
    char *kwnames[] = {
        "type","value", NULL 
    };
    BoundaryCondition *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:new_BoundaryCondition",kwnames,&obj0,&arg1)) return NULL;
    {
        if (PyString_Check(obj0)) {
            std::string s(PyString_AsString(obj0));
            ConvertToLowercase(s);
            if (s == "" || s == "none")	arg0 = new BoundaryConditionType(BoundaryCondition::None);
            else if (s == "neumann")	arg0 = new BoundaryConditionType(BoundaryCondition::Neumann);
            else if (s == "dirichlet")	arg0 = new BoundaryConditionType(BoundaryCondition::Dirichlet);
            else {
                PyErr_SetString(PyExc_TypeError,"not a boundary condition type");
                return NULL;
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a boundary condition type");
            return NULL;
        }
    }
    {
        try {
            result = (BoundaryCondition *)new BoundaryCondition(*arg0,arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_BoundaryCondition);
    {
        delete arg0;
    }
    return resultobj;
}


static PyObject *_wrap_BoundaryCondition_type(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    BoundaryCondition *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    BoundaryConditionType *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:BoundaryCondition_type",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_BoundaryCondition,1)) == -1) return NULL;
    {
        try {
            result = new BoundaryConditionType (arg0->type());
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }{
        switch (*result) {
            case BoundaryCondition::None:			resultobj = PyString_FromString("None");		break;
            case BoundaryCondition::Neumann:		resultobj = PyString_FromString("Neumann");	break;
            case BoundaryCondition::Dirichlet:	resultobj = PyString_FromString("Dirichlet");	break;
        }
    }
    {
        delete result;
    }
    return resultobj;
}


static PyObject *_wrap_BoundaryCondition_value(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    BoundaryCondition *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:BoundaryCondition_value",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_BoundaryCondition,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->value();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_TridiagonalOperator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Array *arg0 ;
    Array *arg1 ;
    Array *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    char *kwnames[] = {
        "low","mid","high", NULL 
    };
    TridiagonalOperator *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO:new_TridiagonalOperator",kwnames,&obj0,&obj1,&obj2)) return NULL;
    {
        if (PyTuple_Check(obj0)) {
            int size = PyTuple_Size(obj0);
            arg0 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyTuple_GetItem(obj0,i);
                if (PyFloat_Check(o)) {
                    (*arg0)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg0)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain doubles");
                    delete arg0;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj0)) {
            int size = PyList_Size(obj0);
            arg0 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyList_GetItem(obj0,i);
                if (PyFloat_Check(o)) {
                    (*arg0)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg0)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain doubles");
                    delete arg0;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        if (PyTuple_Check(obj1)) {
            int size = PyTuple_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyTuple_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        if (PyTuple_Check(obj2)) {
            int size = PyTuple_Size(obj2);
            arg2 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyTuple_GetItem(obj2,i);
                if (PyFloat_Check(o)) {
                    (*arg2)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg2)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain doubles");
                    delete arg2;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj2)) {
            int size = PyList_Size(obj2);
            arg2 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyList_GetItem(obj2,i);
                if (PyFloat_Check(o)) {
                    (*arg2)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg2)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain doubles");
                    delete arg2;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        try {
            result = (TridiagonalOperator *)new TridiagonalOperator(*arg0,*arg1,*arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TridiagonalOperator);
    {
        delete arg0;
    }
    {
        delete arg1;
    }
    {
        delete arg2;
    }
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_solveFor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    Array *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    char *kwnames[] = {
        "self","rhs", NULL 
    };
    Array *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TridiagonalOperator_solveFor",kwnames,&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        if (PyTuple_Check(obj1)) {
            int size = PyTuple_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyTuple_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        try {
            result = new Array (arg0->solveFor(*arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }{
        resultobj = PyTuple_New(result->size());
        for (int i=0; i<result->size(); i++)
        PyTuple_SetItem(resultobj,i,PyFloat_FromDouble((*result)[i]));
    }
    {
        delete arg1;
    }
    {
        delete result;
    }
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_applyTo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    Array *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    char *kwnames[] = {
        "self","v", NULL 
    };
    Array *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TridiagonalOperator_applyTo",kwnames,&argo0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        if (PyTuple_Check(obj1)) {
            int size = PyTuple_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyTuple_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"tuple must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else if (PyList_Check(obj1)) {
            int size = PyList_Size(obj1);
            arg1 = new Array(size);
            for (int i=0; i<size; i++) {
                PyObject* o = PyList_GetItem(obj1,i);
                if (PyFloat_Check(o)) {
                    (*arg1)[i] = PyFloat_AsDouble(o);
                }else if (PyInt_Check(o)) {
                    (*arg1)[i] = double(PyInt_AsLong(o));
                }else {
                    PyErr_SetString(PyExc_TypeError,"list must contain doubles");
                    delete arg1;
                    return NULL;
                }
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not a sequence");
            return NULL;
        }
    }
    {
        try {
            result = new Array (arg0->applyTo(*arg1));
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }{
        resultobj = PyTuple_New(result->size());
        for (int i=0; i<result->size(); i++)
        PyTuple_SetItem(resultobj,i,PyFloat_FromDouble((*result)[i]));
    }
    {
        delete arg1;
    }
    {
        delete result;
    }
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_size(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    int result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:TridiagonalOperator_size",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        try {
            result = (int )arg0->size();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setLowerBC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    BoundaryCondition *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","bc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TridiagonalOperator_setLowerBC",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_BoundaryCondition,1)) == -1) return NULL;
    {
        try {
            arg0->setLowerBC(*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setHigherBC(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    BoundaryCondition *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","bc", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:TridiagonalOperator_setHigherBC",kwnames,&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_BoundaryCondition,1)) == -1) return NULL;
    {
        try {
            arg0->setHigherBC(*arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setFirstRow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    double arg1 ;
    double arg2 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","arg2","arg3", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Odd:TridiagonalOperator_setFirstRow",kwnames,&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        try {
            arg0->setFirstRow(arg1,arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setMidRow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    int arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","arg2","arg3","arg4","arg5", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiddd:TridiagonalOperator_setMidRow",kwnames,&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        try {
            arg0->setMidRow(arg1,arg2,arg3,arg4);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setMidRows(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","arg2","arg3","arg4", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oddd:TridiagonalOperator_setMidRows",kwnames,&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        try {
            arg0->setMidRows(arg1,arg2,arg3);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TridiagonalOperator_setLastRow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    TridiagonalOperator *arg0 ;
    double arg1 ;
    double arg2 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","arg2","arg3", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Odd:TridiagonalOperator_setLastRow",kwnames,&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_TridiagonalOperator,1)) == -1) return NULL;
    {
        try {
            arg0->setLastRow(arg1,arg2);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_BSMEuropeanOption(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    OptionType *arg0 ;
    double arg1 ;
    double arg2 ;
    Rate arg3 ;
    Rate arg4 ;
    Time arg5 ;
    double arg6 ;
    PyObject * obj0  = 0 ;
    char *kwnames[] = {
        "type","underlying","strike","underlyingGrowthRate","riskFreeRate","residualTime","volatility", NULL 
    };
    BSMEuropeanOption *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Odddddd:new_BSMEuropeanOption",kwnames,&obj0,&arg1,&arg2,&arg3,&arg4,&arg5,&arg6)) return NULL;
    {
        if (PyString_Check(obj0)) {
            arg0 = new OptionType;
            std::string s(PyString_AsString(obj0));
            ConvertToLowercase(s);
            if (s == "call")				*(arg0) = Option::Call;
            else if (s == "put")			*(arg0) = Option::Put;
            else if (s == "straddle")		*(arg0) = Option::Straddle;
            else {
                PyErr_SetString(PyExc_TypeError,"unknown option type");
                delete arg0;
                return NULL;
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not an option type");
            return NULL;
        }
    }
    {
        try {
            result = (BSMEuropeanOption *)new BSMEuropeanOption(*arg0,arg1,arg2,arg3,arg4,arg5,arg6);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_BSMEuropeanOption);
    {
        delete arg0;
    }
    return resultobj;
}


static PyObject *_wrap_BSMEuropeanOption_value(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    BSMEuropeanOption *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:BSMEuropeanOption_value",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_BSMEuropeanOption,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->value();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_BSMAmericanOption(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    OptionType *arg0 ;
    double arg1 ;
    double arg2 ;
    Rate arg3 ;
    Rate arg4 ;
    Time arg5 ;
    double arg6 ;
    int arg7 ;
    int arg8 ;
    PyObject * obj0  = 0 ;
    char *kwnames[] = {
        "type","underlying","strike","underlyingGrowthRate","riskFreeRate","residualTime","volatility","timeSteps","gridPoints", NULL 
    };
    BSMAmericanOption *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oddddddii:new_BSMAmericanOption",kwnames,&obj0,&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8)) return NULL;
    {
        if (PyString_Check(obj0)) {
            arg0 = new OptionType;
            std::string s(PyString_AsString(obj0));
            ConvertToLowercase(s);
            if (s == "call")				*(arg0) = Option::Call;
            else if (s == "put")			*(arg0) = Option::Put;
            else if (s == "straddle")		*(arg0) = Option::Straddle;
            else {
                PyErr_SetString(PyExc_TypeError,"unknown option type");
                delete arg0;
                return NULL;
            }
        }else {
            PyErr_SetString(PyExc_TypeError,"not an option type");
            return NULL;
        }
    }
    {
        try {
            result = (BSMAmericanOption *)new BSMAmericanOption(*arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_BSMAmericanOption);
    {
        delete arg0;
    }
    return resultobj;
}


static PyObject *_wrap_BSMAmericanOption_value(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    BSMAmericanOption *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:BSMAmericanOption_value",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_BSMAmericanOption,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->value();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Function_value(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Function *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","x", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:Function_value",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Function,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->value(arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Function_derivative(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Function *arg0 ;
    double arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","x", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:Function_derivative",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Function,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->derivative(arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Solver1D_solve(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Solver1D *arg0 ;
    Function *arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","f","xAccuracy","guess","step", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOddd:Solver1D_solve",kwnames,&argo0,&argo1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Solver1D,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Function,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->solve((Function const &)*arg1,arg2,arg3,arg4);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Solver1D_bracketedSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Solver1D *arg0 ;
    Function *arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    char *kwnames[] = {
        "self","f","xAccuracy","guess","xMin","xMax", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOdddd:Solver1D_bracketedSolve",kwnames,&argo0,&argo1,&arg2,&arg3,&arg4,&arg5)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Solver1D,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_Function,1)) == -1) return NULL;
    {
        try {
            result = (double )arg0->solve((Function const &)*arg1,arg2,arg3,arg4,arg5);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_Solver1D_setMaxEvaluations(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Solver1D *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self","evaluations", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:Solver1D_setMaxEvaluations",kwnames,&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Solver1D,1)) == -1) return NULL;
    {
        try {
            arg0->setMaxEvaluations(arg1);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


double  Solver1D_pySolve(Solver1D *self,PyObject *pyFunction,double xAccuracy,double guess,double step) {
    {
        PyFunction f(pyFunction);
        return self->solve(f, xAccuracy, guess, step);
    }
}


static PyObject *_wrap_Solver1D_pySolve(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Solver1D *arg0 ;
    PyObject *arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    char *kwnames[] = {
        "self","pyFunction","xAccuracy","guess","step", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOddd:Solver1D_pySolve",kwnames,&argo0,&obj1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Solver1D,1)) == -1) return NULL;
    {
        arg1 = obj1;
    }
    {
        try {
            result = (double )Solver1D_pySolve(arg0,arg1,arg2,arg3,arg4);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


double  Solver1D_pyBracketedSolve(Solver1D *self,PyObject *pyFunction,double xAccuracy,double guess,double xMin,double xMax) {
    {
        PyFunction f(pyFunction);
        return self->solve(f, xAccuracy, guess, xMin, xMax);
    }
}


static PyObject *_wrap_Solver1D_pyBracketedSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Solver1D *arg0 ;
    PyObject *arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    char *kwnames[] = {
        "self","pyFunction","xAccuracy","guess","xMin","xMax", NULL 
    };
    double result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOdddd:Solver1D_pyBracketedSolve",kwnames,&argo0,&obj1,&arg2,&arg3,&arg4,&arg5)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Solver1D,1)) == -1) return NULL;
    {
        arg1 = obj1;
    }
    {
        try {
            result = (double )Solver1D_pyBracketedSolve(arg0,arg1,arg2,arg3,arg4,arg5);
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = PyFloat_FromDouble(result);
    return resultobj;
}


static PyObject *_wrap_new_Bisection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Bisection *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_Bisection",kwnames)) return NULL;
    {
        try {
            result = (Bisection *)new Bisection();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Bisection);
    return resultobj;
}


static PyObject *_wrap_delete_Bisection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Bisection *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Bisection",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Bisection,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_Brent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Brent *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_Brent",kwnames)) return NULL;
    {
        try {
            result = (Brent *)new Brent();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Brent);
    return resultobj;
}


static PyObject *_wrap_delete_Brent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Brent *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Brent",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Brent,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_FalsePosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    FalsePosition *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FalsePosition",kwnames)) return NULL;
    {
        try {
            result = (FalsePosition *)new FalsePosition();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FalsePosition);
    return resultobj;
}


static PyObject *_wrap_delete_FalsePosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FalsePosition *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FalsePosition",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_FalsePosition,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_Newton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Newton *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_Newton",kwnames)) return NULL;
    {
        try {
            result = (Newton *)new Newton();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Newton);
    return resultobj;
}


static PyObject *_wrap_delete_Newton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Newton *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Newton",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Newton,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_NewtonSafe(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    NewtonSafe *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_NewtonSafe",kwnames)) return NULL;
    {
        try {
            result = (NewtonSafe *)new NewtonSafe();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_NewtonSafe);
    return resultobj;
}


static PyObject *_wrap_delete_NewtonSafe(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    NewtonSafe *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_NewtonSafe",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_NewtonSafe,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_Ridder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Ridder *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_Ridder",kwnames)) return NULL;
    {
        try {
            result = (Ridder *)new Ridder();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Ridder);
    return resultobj;
}


static PyObject *_wrap_delete_Ridder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Ridder *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Ridder",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Ridder,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_Secant(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *kwnames[] = {
        NULL 
    };
    Secant *result ;
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_Secant",kwnames)) return NULL;
    {
        try {
            result = (Secant *)new Secant();
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Secant);
    return resultobj;
}


static PyObject *_wrap_delete_Secant(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Secant *arg0 ;
    PyObject * argo0 =0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_Secant",kwnames,&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Secant,1)) == -1) return NULL;
    {
        try {
            delete arg0;
            
        }catch (std::exception& e) {
            PyErr_SetString(PyExc_Exception,e.what());
            return NULL;
        }catch (...) {
            PyErr_SetString(PyExc_Exception,"unknown error");
            return NULL;
        }
    }Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyMethodDef QuantLibcMethods[] = {
	 { "DateFromSerialNumber", (PyCFunction) _wrap_DateFromSerialNumber, METH_VARARGS | METH_KEYWORDS },
	 { "TARGET", (PyCFunction) _wrap_TARGET, METH_VARARGS | METH_KEYWORDS },
	 { "NewYork", (PyCFunction) _wrap_NewYork, METH_VARARGS | METH_KEYWORDS },
	 { "London", (PyCFunction) _wrap_London, METH_VARARGS | METH_KEYWORDS },
	 { "Frankfurt", (PyCFunction) _wrap_Frankfurt, METH_VARARGS | METH_KEYWORDS },
	 { "Milan", (PyCFunction) _wrap_Milan, METH_VARARGS | METH_KEYWORDS },
	 { "Actual360", (PyCFunction) _wrap_Actual360, METH_VARARGS | METH_KEYWORDS },
	 { "Actual365", (PyCFunction) _wrap_Actual365, METH_VARARGS | METH_KEYWORDS },
	 { "Thirty360", (PyCFunction) _wrap_Thirty360, METH_VARARGS | METH_KEYWORDS },
	 { "Thirty360European", (PyCFunction) _wrap_Thirty360European, METH_VARARGS | METH_KEYWORDS },
	 { "Thirty360Italian", (PyCFunction) _wrap_Thirty360Italian, METH_VARARGS | METH_KEYWORDS },
	 { "EUR", (PyCFunction) _wrap_EUR, METH_VARARGS | METH_KEYWORDS },
	 { "USD", (PyCFunction) _wrap_USD, METH_VARARGS | METH_KEYWORDS },
	 { "GBP", (PyCFunction) _wrap_GBP, METH_VARARGS | METH_KEYWORDS },
	 { "DEM", (PyCFunction) _wrap_DEM, METH_VARARGS | METH_KEYWORDS },
	 { "ITL", (PyCFunction) _wrap_ITL, METH_VARARGS | METH_KEYWORDS },
	 { "PiecewiseConstantForwards", (PyCFunction) _wrap_PiecewiseConstantForwards, METH_VARARGS | METH_KEYWORDS },
	 { "Stock", (PyCFunction) _wrap_Stock, METH_VARARGS | METH_KEYWORDS },
	 { "new_Date", (PyCFunction) _wrap_new_Date, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Date", (PyCFunction) _wrap_delete_Date, METH_VARARGS | METH_KEYWORDS },
	 { "Date_dayOfWeek", (PyCFunction) _wrap_Date_dayOfWeek, METH_VARARGS | METH_KEYWORDS },
	 { "Date_dayOfMonth", (PyCFunction) _wrap_Date_dayOfMonth, METH_VARARGS | METH_KEYWORDS },
	 { "Date_dayOfYear", (PyCFunction) _wrap_Date_dayOfYear, METH_VARARGS | METH_KEYWORDS },
	 { "Date_month", (PyCFunction) _wrap_Date_month, METH_VARARGS | METH_KEYWORDS },
	 { "Date_year", (PyCFunction) _wrap_Date_year, METH_VARARGS | METH_KEYWORDS },
	 { "Date_serialNumber", (PyCFunction) _wrap_Date_serialNumber, METH_VARARGS | METH_KEYWORDS },
	 { "Date_plusDays", (PyCFunction) _wrap_Date_plusDays, METH_VARARGS | METH_KEYWORDS },
	 { "Date_plusWeeks", (PyCFunction) _wrap_Date_plusWeeks, METH_VARARGS | METH_KEYWORDS },
	 { "Date_plusMonths", (PyCFunction) _wrap_Date_plusMonths, METH_VARARGS | METH_KEYWORDS },
	 { "Date_plusYears", (PyCFunction) _wrap_Date_plusYears, METH_VARARGS | METH_KEYWORDS },
	 { "Date_plus", (PyCFunction) _wrap_Date_plus, METH_VARARGS | METH_KEYWORDS },
	 { "Date_isLeap", (PyCFunction) _wrap_Date_isLeap, METH_VARARGS | METH_KEYWORDS },
	 { "Date_minDate", (PyCFunction) _wrap_Date_minDate, METH_VARARGS | METH_KEYWORDS },
	 { "Date_maxDate", (PyCFunction) _wrap_Date_maxDate, METH_VARARGS | METH_KEYWORDS },
	 { "Date___add__", (PyCFunction) _wrap_Date___add__, METH_VARARGS | METH_KEYWORDS },
	 { "Date___sub__", (PyCFunction) _wrap_Date___sub__, METH_VARARGS | METH_KEYWORDS },
	 { "Date___str__", (PyCFunction) _wrap_Date___str__, METH_VARARGS | METH_KEYWORDS },
	 { "Date___repr__", (PyCFunction) _wrap_Date___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Calendar", (PyCFunction) _wrap_delete_Calendar, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar_isBusinessDay", (PyCFunction) _wrap_Calendar_isBusinessDay, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar_isHoliday", (PyCFunction) _wrap_Calendar_isHoliday, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar_roll", (PyCFunction) _wrap_Calendar_roll, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar_advance", (PyCFunction) _wrap_Calendar_advance, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar___str__", (PyCFunction) _wrap_Calendar___str__, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar___repr__", (PyCFunction) _wrap_Calendar___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar___cmp__", (PyCFunction) _wrap_Calendar___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "Calendar___nonzero__", (PyCFunction) _wrap_Calendar___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { "delete_DayCounter", (PyCFunction) _wrap_delete_DayCounter, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter_dayCount", (PyCFunction) _wrap_DayCounter_dayCount, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter_yearFraction", (PyCFunction) _wrap_DayCounter_yearFraction, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter___str__", (PyCFunction) _wrap_DayCounter___str__, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter___repr__", (PyCFunction) _wrap_DayCounter___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter___cmp__", (PyCFunction) _wrap_DayCounter___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "DayCounter___nonzero__", (PyCFunction) _wrap_DayCounter___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Currency", (PyCFunction) _wrap_delete_Currency, METH_VARARGS | METH_KEYWORDS },
	 { "Currency_settlementCalendar", (PyCFunction) _wrap_Currency_settlementCalendar, METH_VARARGS | METH_KEYWORDS },
	 { "Currency_settlementDays", (PyCFunction) _wrap_Currency_settlementDays, METH_VARARGS | METH_KEYWORDS },
	 { "Currency_settlementDate", (PyCFunction) _wrap_Currency_settlementDate, METH_VARARGS | METH_KEYWORDS },
	 { "Currency___str__", (PyCFunction) _wrap_Currency___str__, METH_VARARGS | METH_KEYWORDS },
	 { "Currency___repr__", (PyCFunction) _wrap_Currency___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "Currency___cmp__", (PyCFunction) _wrap_Currency___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "Currency___nonzero__", (PyCFunction) _wrap_Currency___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { "delete_TermStructure", (PyCFunction) _wrap_delete_TermStructure, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_clone", (PyCFunction) _wrap_TermStructure_clone, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_currency", (PyCFunction) _wrap_TermStructure_currency, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_todaysDate", (PyCFunction) _wrap_TermStructure_todaysDate, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_settlementDate", (PyCFunction) _wrap_TermStructure_settlementDate, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_calendar", (PyCFunction) _wrap_TermStructure_calendar, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_maxDate", (PyCFunction) _wrap_TermStructure_maxDate, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_minDate", (PyCFunction) _wrap_TermStructure_minDate, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_zeroYield", (PyCFunction) _wrap_TermStructure_zeroYield, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_discount", (PyCFunction) _wrap_TermStructure_discount, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure_forward", (PyCFunction) _wrap_TermStructure_forward, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure___str__", (PyCFunction) _wrap_TermStructure___str__, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure___repr__", (PyCFunction) _wrap_TermStructure___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "TermStructure___nonzero__", (PyCFunction) _wrap_TermStructure___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { "new_Deposit", (PyCFunction) _wrap_new_Deposit, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Deposit", (PyCFunction) _wrap_delete_Deposit, METH_VARARGS | METH_KEYWORDS },
	 { "Deposit_maturity", (PyCFunction) _wrap_Deposit_maturity, METH_VARARGS | METH_KEYWORDS },
	 { "Deposit_rate", (PyCFunction) _wrap_Deposit_rate, METH_VARARGS | METH_KEYWORDS },
	 { "Deposit_dayCounter", (PyCFunction) _wrap_Deposit_dayCounter, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Instrument", (PyCFunction) _wrap_delete_Instrument, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_setPrice", (PyCFunction) _wrap_Instrument_setPrice, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_setTermStructure", (PyCFunction) _wrap_Instrument_setTermStructure, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_isinCode", (PyCFunction) _wrap_Instrument_isinCode, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_description", (PyCFunction) _wrap_Instrument_description, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_termStructure", (PyCFunction) _wrap_Instrument_termStructure, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_NPV", (PyCFunction) _wrap_Instrument_NPV, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument_price", (PyCFunction) _wrap_Instrument_price, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument___str__", (PyCFunction) _wrap_Instrument___str__, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument___repr__", (PyCFunction) _wrap_Instrument___repr__, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument___cmp__", (PyCFunction) _wrap_Instrument___cmp__, METH_VARARGS | METH_KEYWORDS },
	 { "Instrument___nonzero__", (PyCFunction) _wrap_Instrument___nonzero__, METH_VARARGS | METH_KEYWORDS },
	 { "new_BoundaryCondition", (PyCFunction) _wrap_new_BoundaryCondition, METH_VARARGS | METH_KEYWORDS },
	 { "BoundaryCondition_type", (PyCFunction) _wrap_BoundaryCondition_type, METH_VARARGS | METH_KEYWORDS },
	 { "BoundaryCondition_value", (PyCFunction) _wrap_BoundaryCondition_value, METH_VARARGS | METH_KEYWORDS },
	 { "new_TridiagonalOperator", (PyCFunction) _wrap_new_TridiagonalOperator, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_solveFor", (PyCFunction) _wrap_TridiagonalOperator_solveFor, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_applyTo", (PyCFunction) _wrap_TridiagonalOperator_applyTo, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_size", (PyCFunction) _wrap_TridiagonalOperator_size, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setLowerBC", (PyCFunction) _wrap_TridiagonalOperator_setLowerBC, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setHigherBC", (PyCFunction) _wrap_TridiagonalOperator_setHigherBC, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setFirstRow", (PyCFunction) _wrap_TridiagonalOperator_setFirstRow, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setMidRow", (PyCFunction) _wrap_TridiagonalOperator_setMidRow, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setMidRows", (PyCFunction) _wrap_TridiagonalOperator_setMidRows, METH_VARARGS | METH_KEYWORDS },
	 { "TridiagonalOperator_setLastRow", (PyCFunction) _wrap_TridiagonalOperator_setLastRow, METH_VARARGS | METH_KEYWORDS },
	 { "new_BSMEuropeanOption", (PyCFunction) _wrap_new_BSMEuropeanOption, METH_VARARGS | METH_KEYWORDS },
	 { "BSMEuropeanOption_value", (PyCFunction) _wrap_BSMEuropeanOption_value, METH_VARARGS | METH_KEYWORDS },
	 { "new_BSMAmericanOption", (PyCFunction) _wrap_new_BSMAmericanOption, METH_VARARGS | METH_KEYWORDS },
	 { "BSMAmericanOption_value", (PyCFunction) _wrap_BSMAmericanOption_value, METH_VARARGS | METH_KEYWORDS },
	 { "Function_value", (PyCFunction) _wrap_Function_value, METH_VARARGS | METH_KEYWORDS },
	 { "Function_derivative", (PyCFunction) _wrap_Function_derivative, METH_VARARGS | METH_KEYWORDS },
	 { "Solver1D_solve", (PyCFunction) _wrap_Solver1D_solve, METH_VARARGS | METH_KEYWORDS },
	 { "Solver1D_bracketedSolve", (PyCFunction) _wrap_Solver1D_bracketedSolve, METH_VARARGS | METH_KEYWORDS },
	 { "Solver1D_setMaxEvaluations", (PyCFunction) _wrap_Solver1D_setMaxEvaluations, METH_VARARGS | METH_KEYWORDS },
	 { "Solver1D_pySolve", (PyCFunction) _wrap_Solver1D_pySolve, METH_VARARGS | METH_KEYWORDS },
	 { "Solver1D_pyBracketedSolve", (PyCFunction) _wrap_Solver1D_pyBracketedSolve, METH_VARARGS | METH_KEYWORDS },
	 { "new_Bisection", (PyCFunction) _wrap_new_Bisection, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Bisection", (PyCFunction) _wrap_delete_Bisection, METH_VARARGS | METH_KEYWORDS },
	 { "new_Brent", (PyCFunction) _wrap_new_Brent, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Brent", (PyCFunction) _wrap_delete_Brent, METH_VARARGS | METH_KEYWORDS },
	 { "new_FalsePosition", (PyCFunction) _wrap_new_FalsePosition, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FalsePosition", (PyCFunction) _wrap_delete_FalsePosition, METH_VARARGS | METH_KEYWORDS },
	 { "new_Newton", (PyCFunction) _wrap_new_Newton, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Newton", (PyCFunction) _wrap_delete_Newton, METH_VARARGS | METH_KEYWORDS },
	 { "new_NewtonSafe", (PyCFunction) _wrap_new_NewtonSafe, METH_VARARGS | METH_KEYWORDS },
	 { "delete_NewtonSafe", (PyCFunction) _wrap_delete_NewtonSafe, METH_VARARGS | METH_KEYWORDS },
	 { "new_Ridder", (PyCFunction) _wrap_new_Ridder, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Ridder", (PyCFunction) _wrap_delete_Ridder, METH_VARARGS | METH_KEYWORDS },
	 { "new_Secant", (PyCFunction) _wrap_new_Secant, METH_VARARGS | METH_KEYWORDS },
	 { "delete_Secant", (PyCFunction) _wrap_delete_Secant, METH_VARARGS | METH_KEYWORDS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_NewtonTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((Newton *) x));
}
static void *_p_RidderTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((Ridder *) x));
}
static void *_p_FalsePositionTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((FalsePosition *) x));
}
static void *_p_BrentTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((Brent *) x));
}
static void *_p_SecantTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((Secant *) x));
}
static void *_p_NewtonSafeTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((NewtonSafe *) x));
}
static void *_p_BisectionTo_p_Solver1D(void *x) {
    return (void *)((Solver1D *) ((Bisection *) x));
}
static swig_type_info _swigt__p_Solver1D[] = {{"_p_Solver1D", 0, "Solver1D *"},{"_p_Newton", _p_NewtonTo_p_Solver1D},{"_p_Ridder", _p_RidderTo_p_Solver1D},{"_p_FalsePosition", _p_FalsePositionTo_p_Solver1D},{"_p_Brent", _p_BrentTo_p_Solver1D},{"_p_Solver1D"},{"_p_Secant", _p_SecantTo_p_Solver1D},{"_p_NewtonSafe", _p_NewtonSafeTo_p_Solver1D},{"_p_Bisection", _p_BisectionTo_p_Solver1D},{0}};
static swig_type_info _swigt__p_TermStructureHandle[] = {{"_p_TermStructureHandle", 0, "TermStructureHandle *"},{"_p_TermStructureHandle"},{0}};
static swig_type_info _swigt__p_CurrencyHandle[] = {{"_p_CurrencyHandle", 0, "CurrencyHandle *"},{"_p_CurrencyHandle"},{0}};
static swig_type_info _swigt__p_Ridder[] = {{"_p_Ridder", 0, "Ridder *"},{"_p_Ridder"},{0}};
static swig_type_info _swigt__p_Deposit[] = {{"_p_Deposit", 0, "Deposit *"},{"_p_Deposit"},{0}};
static swig_type_info _swigt__p_Newton[] = {{"_p_Newton", 0, "Newton *"},{"_p_Newton"},{0}};
static swig_type_info _swigt__p_Secant[] = {{"_p_Secant", 0, "Secant *"},{"_p_Secant"},{0}};
static swig_type_info _swigt__p_InstrumentHandle[] = {{"_p_InstrumentHandle", 0, "InstrumentHandle *"},{"_p_InstrumentHandle"},{0}};
static swig_type_info _swigt__p_DayCounterHandle[] = {{"_p_DayCounterHandle", 0, "DayCounterHandle *"},{"_p_DayCounterHandle"},{0}};
static swig_type_info _swigt__p_CalendarHandle[] = {{"_p_CalendarHandle", 0, "CalendarHandle *"},{"_p_CalendarHandle"},{0}};
static swig_type_info _swigt__p_Bisection[] = {{"_p_Bisection", 0, "Bisection *"},{"_p_Bisection"},{0}};
static swig_type_info _swigt__p_Function[] = {{"_p_Function", 0, "Function *"},{"_p_Function"},{0}};
static swig_type_info _swigt__p_Date[] = {{"_p_Date", 0, "Date *"},{"_p_Date"},{0}};
static swig_type_info _swigt__p_BoundaryCondition[] = {{"_p_BoundaryCondition", 0, "BoundaryCondition *"},{"_p_BoundaryCondition"},{0}};
static swig_type_info _swigt__p_FalsePosition[] = {{"_p_FalsePosition", 0, "FalsePosition *"},{"_p_FalsePosition"},{0}};
static swig_type_info _swigt__p_BSMAmericanOption[] = {{"_p_BSMAmericanOption", 0, "BSMAmericanOption *"},{"_p_BSMAmericanOption"},{0}};
static swig_type_info _swigt__p_BSMEuropeanOption[] = {{"_p_BSMEuropeanOption", 0, "BSMEuropeanOption *"},{"_p_BSMEuropeanOption"},{0}};
static swig_type_info _swigt__p_Brent[] = {{"_p_Brent", 0, "Brent *"},{"_p_Brent"},{0}};
static swig_type_info _swigt__p_NewtonSafe[] = {{"_p_NewtonSafe", 0, "NewtonSafe *"},{"_p_NewtonSafe"},{0}};
static swig_type_info _swigt__p_TridiagonalOperator[] = {{"_p_TridiagonalOperator", 0, "TridiagonalOperator *"},{"_p_TridiagonalOperator"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Solver1D, 
_swigt__p_TermStructureHandle, 
_swigt__p_CurrencyHandle, 
_swigt__p_Ridder, 
_swigt__p_Deposit, 
_swigt__p_Newton, 
_swigt__p_Secant, 
_swigt__p_InstrumentHandle, 
_swigt__p_DayCounterHandle, 
_swigt__p_CalendarHandle, 
_swigt__p_Bisection, 
_swigt__p_Function, 
_swigt__p_Date, 
_swigt__p_BoundaryCondition, 
_swigt__p_FalsePosition, 
_swigt__p_BSMAmericanOption, 
_swigt__p_BSMEuropeanOption, 
_swigt__p_Brent, 
_swigt__p_NewtonSafe, 
_swigt__p_TridiagonalOperator, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initQuantLibc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule("QuantLibc", QuantLibcMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    SWIG_InstallConstants(d,swig_const_table);
}

