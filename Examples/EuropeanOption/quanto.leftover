

        /* The following didn't belong into the European option example, 
           and confused its output. Move it into another example after
           release.

        // quanto and all that

        Handle<AnalyticEuropeanEngine> baseEngine(new
            AnalyticEuropeanEngine);

        Handle<QuantoEngine<VanillaOption::arguments,
                            VanillaOption::results> >
            quantoEngine(new QuantoEngine<VanillaOption::arguments,
                                          VanillaOption::results>(baseEngine));

        double correlation = 0.0;
        QuantoVanillaOption quantoOption(
            flatTermStructure,
            flatVolTS,
            RelinkableHandle<Quote>(Handle<Quote>(new
                SimpleQuote(correlation))),
            stochasticProcess,
            payoff,
            exercise,
            quantoEngine);

        value = quantoOption.NPV();
        double delta = quantoOption.delta();
        double gamma = quantoOption.gamma();
        double theta = quantoOption.theta();
        double vega = quantoOption.vega();
        double rho = quantoOption.rho();
        double divRho = quantoOption.dividendRho();
        double qvega = quantoOption.qvega();
        double qrho = quantoOption.qrho();
        double qlambda = quantoOption.qlambda();
        std::cout << std::endl << std::endl << "quanto: "
             << DoubleFormatter::toString(value, 4)
             << std::endl;
        std::cout << "quanto delta: "
             << DoubleFormatter::toString(delta, 4)
             << std::endl;
        std::cout << "quanto gamma: "
             << DoubleFormatter::toString(gamma, 4)
             << std::endl;
        std::cout << "quanto theta: "
             << DoubleFormatter::toString(theta, 4)
             << std::endl;
        std::cout << "quanto vega: "
             << DoubleFormatter::toString(vega, 4)
             << std::endl;
        std::cout << "quanto rho: "
             << DoubleFormatter::toString(rho, 4)
             << std::endl;
        std::cout << "quanto divRho: "
             << DoubleFormatter::toString(divRho, 4)
             << std::endl;
        std::cout << "quanto qvega: "
             << DoubleFormatter::toString(qvega, 4)
             << std::endl;
        std::cout << "quanto qrho: "
             << DoubleFormatter::toString(qrho, 4)
             << std::endl;
        std::cout << "quanto qlambda: "
             << DoubleFormatter::toString(qlambda, 4)
             << std::endl;


        Handle<ForwardEngine<VanillaOption::arguments,
                             VanillaOption::results> >
            forwardEngine(new ForwardEngine<VanillaOption::arguments,
                                            VanillaOption::results>(baseEngine));

        Date resetDate = settlementDate.plusMonths(1);
        ForwardVanillaOption forwardOption(
            1.1, // moneyness
            resetDate,
            stochasticProcess,
            payoff,
            exercise,
            forwardEngine);

        value   = forwardOption.NPV();
        delta   = forwardOption.delta();
        gamma   = forwardOption.gamma();
        theta   = forwardOption.theta();
        vega    = forwardOption.vega();
        rho     = forwardOption.rho();
        divRho  = forwardOption.dividendRho();
        std::cout << std::endl << std::endl << "forward: "
             << DoubleFormatter::toString(value, 4)
             << std::endl;
        std::cout << "forward delta: "
             << DoubleFormatter::toString(delta, 4)
             << std::endl;
        std::cout << "forward gamma: "
             << DoubleFormatter::toString(gamma, 4)
             << std::endl;
        std::cout << "forward theta: "
             << DoubleFormatter::toString(theta, 4)
             << std::endl;
        std::cout << "forward vega: "
             << DoubleFormatter::toString(vega, 4)
             << std::endl;
        std::cout << "forward rho: "
             << DoubleFormatter::toString(rho, 4)
             << std::endl;
        std::cout << "forward divRho: "
             << DoubleFormatter::toString(divRho, 4)
             << std::endl;


        Handle<ForwardPerformanceEngine<VanillaOption::arguments,
                                        VanillaOption::results> >
            forwardPerformanceEngine(
                new ForwardPerformanceEngine<VanillaOption::arguments,
                                             VanillaOption::results>(
                    baseEngine));

        forwardOption.setPricingEngine(forwardPerformanceEngine);

        value   = forwardOption.NPV();
        delta   = forwardOption.delta();
        gamma   = forwardOption.gamma();
        theta   = forwardOption.theta();
        vega    = forwardOption.vega();
        rho     = forwardOption.rho();
        divRho  = forwardOption.dividendRho();
        std::cout << std::endl << std::endl << "forward performance: "
             << DoubleFormatter::toString(value, 4)
             << std::endl;
        std::cout << "forward performance delta: "
             << DoubleFormatter::toString(delta, 4)
             << std::endl;
        std::cout << "forward performance gamma: "
             << DoubleFormatter::toString(gamma, 4)
             << std::endl;
        std::cout << "forward performance theta: "
             << DoubleFormatter::toString(theta, 4)
             << std::endl;
        std::cout << "forward performance vega: "
             << DoubleFormatter::toString(vega, 4)
             << std::endl;
        std::cout << "forward performance rho: "
             << DoubleFormatter::toString(rho, 4)
             << std::endl;
        std::cout << "forward performance divRho: "
             << DoubleFormatter::toString(divRho, 4)
             << std::endl;



        Handle<QuantoEngine<ForwardVanillaOption::arguments,
                            ForwardVanillaOption::results> >
            quantoForwardEngine(
               new QuantoEngine<ForwardVanillaOption::arguments,
                                ForwardVanillaOption::results>(forwardEngine));

        QuantoForwardVanillaOption quantoForwardOption(
            flatTermStructure,
            flatVolTS,
            RelinkableHandle<Quote>(Handle<Quote>(new
                SimpleQuote(correlation))),
            1.1, // moneyness
            resetDate,
            stochasticProcess,
            payoff,
            exercise,
            quantoForwardEngine);

        value   = quantoForwardOption.NPV();
        delta   = quantoForwardOption.delta();
        gamma   = quantoForwardOption.gamma();
        theta   = quantoForwardOption.theta();
        vega    = quantoForwardOption.vega();
        rho     = quantoForwardOption.rho();
        divRho  = quantoForwardOption.dividendRho();
        qvega   = quantoForwardOption.qvega();
        qrho    = quantoForwardOption.qrho();
        qlambda = quantoForwardOption.qlambda();

        std::cout << std::endl << std::endl << "quanto forward: "
             << DoubleFormatter::toString(value, 4)
             << std::endl;
        std::cout << "quanto forward delta: "
             << DoubleFormatter::toString(delta, 4)
             << std::endl;
        std::cout << "quanto forward gamma: "
             << DoubleFormatter::toString(gamma, 4)
             << std::endl;
        std::cout << "quanto forward theta: "
             << DoubleFormatter::toString(theta, 4)
             << std::endl;
        std::cout << "quanto forward vega: "
             << DoubleFormatter::toString(vega, 4)
             << std::endl;
        std::cout << "quanto forward rho: "
             << DoubleFormatter::toString(rho, 4)
             << std::endl;
        std::cout << "quanto forward divRho: "
             << DoubleFormatter::toString(divRho, 4)
             << std::endl;
        std::cout << "quanto forward qvega: "
             << DoubleFormatter::toString(qvega, 4)
             << std::endl;
        std::cout << "quanto forward qrho: "
             << DoubleFormatter::toString(qrho, 4)
             << std::endl;
        std::cout << "quanto forward qlambda: "
             << DoubleFormatter::toString(qlambda, 4)
             << std::endl;


        Handle<QuantoEngine<ForwardVanillaOption::arguments,
                            ForwardVanillaOption::results> >
            quantoForwardPerformanceEngine(
               new QuantoEngine<ForwardVanillaOption::arguments,
                                ForwardVanillaOption::results>(
                   forwardPerformanceEngine));
        quantoForwardOption.setPricingEngine(quantoForwardPerformanceEngine);

        value   = quantoForwardOption.NPV();
        delta   = quantoForwardOption.delta();
        gamma   = quantoForwardOption.gamma();
        theta   = quantoForwardOption.theta();
        vega    = quantoForwardOption.vega();
        rho     = quantoForwardOption.rho();
        divRho  = quantoForwardOption.dividendRho();
        qvega   = quantoForwardOption.qvega();
        qrho    = quantoForwardOption.qrho();
        qlambda = quantoForwardOption.qlambda();

        std::cout << std::endl << std::endl << "quanto forward performance: "
             << DoubleFormatter::toString(value, 4)
             << std::endl;
        std::cout << "quanto forward performance delta: "
             << DoubleFormatter::toString(delta, 4)
             << std::endl;
        std::cout << "quanto forward performance gamma: "
             << DoubleFormatter::toString(gamma, 4)
             << std::endl;
        std::cout << "quanto forward performance theta: "
             << DoubleFormatter::toString(theta, 4)
             << std::endl;
        std::cout << "quanto forward performance vega: "
             << DoubleFormatter::toString(vega, 4)
             << std::endl;
        std::cout << "quanto forward performance rho: "
             << DoubleFormatter::toString(rho, 4)
             << std::endl;
        std::cout << "quanto forward performance divRho: "
             << DoubleFormatter::toString(divRho, 4)
             << std::endl;
        std::cout << "quanto forward performance qvega: "
             << DoubleFormatter::toString(qvega, 4)
             << std::endl;
        std::cout << "quanto forward performance qrho: "
             << DoubleFormatter::toString(qrho, 4)
             << std::endl;
        std::cout << "quanto forward performance qlambda: "
             << DoubleFormatter::toString(qlambda, 4)
             << std::endl;
        */
